<Project>
  <Import Project="$(MSBuildThisFileDirectory)version.props" />
  <PropertyGroup>
    <RepositoryUrl>https://github.com/mhudasch/Verticular.Extensions.Strings.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <RepositoryRoot>$(MSBuildThisFileDirectory)</RepositoryRoot>

    <Authors>Martin Hudasch</Authors>
    <Company/>
    <Copyright>Copyright Â© 2020 Martin Hudasch</Copyright>
    <Description>This contians the dotnet string extension methods that you were missing all those years like:
.IsNull()
.IsNotNull()
.IsEmpty()
.IsNotEmpty()
.IsNullOrEmpty()
.IsNotNullOrEmpty()
.IsNullOrWhiteSpace()
.IsNotNullOrWhiteSpace()
.IsOnlyWhiteSpace()
.IsNotOnlyWhiteSpace()

.IsBase64String()
.IsNotBase64String()
.IsEmailAddress()
.IsUri()
.IsNumeric()
.IsAlphaNumeric()

.IsMatch(@"^\d{4}AAA\d{3}$")
.IsMatch(CustomerNumberRegEx)

.ContainsAny('A', 'B', 'C')
.ContainsAny('A', 'B', 'C', CharacterComparison.InvariantCultureIgnoreCase)
.ContainsAll('A', 'B', 'C')
.ContainsAll('A', 'B', 'C', CharacterComparison.InvariantCultureIgnoreCase)
.ContainsNone('1', ':')

.EqualsAny("Hello", "World")
.EqualsAny("hElLo", "wOrLd", StringComparison.CurrentCultureIgnoreCase)
.EqualsNone("hey", "hi", "hello", "ola")

.Until(':')
.UntilLast("\r\n")

.CountOccurrences('/')
.CountOccurrences("cat", StringComparison.CurrentCultureIgnoreCase)

.GetWordCount()
    </Description>
    <PackageTags>Bcl String Extensions ExtensionMethod Tools</PackageTags>
    <PackageProjectUrl>https://github.com/mhudasch/Verticular.Extensions.Strings</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <!--<PackageIcon>packageIcon.png</PackageIcon>
    <PackageIconFullPath>$(MSBuildThisFileDirectory)packageIcon.png</PackageIconFullPath>-->
    <PackageReleaseNotes/>
    <MinClientVersion>2.12</MinClientVersion>

    <AssemblyVersion>$(VersionPrefix).0</AssemblyVersion>
    <FileVersion>$(VersionPrefix).0</FileVersion>
    <InformationalVersion>$(SemanticAssemblyVersion)</InformationalVersion>

    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>
    <SolutionDir Condition="'$(SolutionDir)' == ''">$(MSBuildThisFileDirectory)</SolutionDir>

    <Nullable>enable</Nullable>
    <LangVersion Condition="'$(LangVersion)' == ''">latest</LangVersion>
  </PropertyGroup>

  <PropertyGroup Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(TargetFramework), `^net(?:20|35|40|4[567][12]?|48)$`))">
    <DefineConstants>$(DefineConstants);NETFULL;NET;NF</DefineConstants>
    <IsNetStandardTarget>false</IsNetStandardTarget>
    <IsNetFrameworkTarget>true</IsNetFrameworkTarget>
    <IsNetCoreTarget>false</IsNetCoreTarget>
  </PropertyGroup>
  <PropertyGroup Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(TargetFramework), `^netstandard(?:1\.[0-6]|2\.[0-1])$`))">
    <DefineConstants>$(DefineConstants);NETSTANDARD;NS</DefineConstants>
    <IsNetStandardTarget>true</IsNetStandardTarget>
    <IsNetFrameworkTarget>false</IsNetFrameworkTarget>
    <IsNetCoreTarget>false</IsNetCoreTarget>
  </PropertyGroup>
  <PropertyGroup Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(TargetFramework), `^netcoreapp(?:1\.[01]|2\.[012]|3\.[0])$|net[5]\.0`))">
    <DefineConstants>$(DefineConstants);NETCOREAPP;NETCORE;NC</DefineConstants>
    <IsNetStandardTarget>false</IsNetStandardTarget>
    <IsNetFrameworkTarget>false</IsNetFrameworkTarget>
    <IsNetCoreTarget>true</IsNetCoreTarget>
  </PropertyGroup>

  <!-- Ignore NU5105 ignore NuGet-Clients that do not support semver 2.0.0 -->
  <!-- Ignore CA1303 that wants us to put all exception texts into resources -->
  <PropertyGroup>
    <NoWarn>$(NoWarn);NU5105;NU1701;NU1702;NU1705;AD1000;CA1303</NoWarn>
  </PropertyGroup>
  <!-- Build Server Ignores -->
  <PropertyGroup Condition="'$(Configuration)' == 'CI'">
    <!-- Ignore CS1591 missing comments on public apis -->
    <NoWarn>$(NoWarn);CS1591</NoWarn>
  </PropertyGroup>

  <!--############### FEATURE DETECTION AREA ###############-->
  <!-- Feature detect for Span<T> -->
  <PropertyGroup>
    <SupportsSpanOfT>false</SupportsSpanOfT>
  </PropertyGroup>
  <PropertyGroup Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(TargetFramework), `^netcoreapp(?:2\.[12]|3\.[0])$`))">
    <SupportsSpanOfT>true</SupportsSpanOfT>
    <DefineConstants>$(DefineConstants);FEATURE_SPAN_OF_T</DefineConstants>
  </PropertyGroup>
</Project>
